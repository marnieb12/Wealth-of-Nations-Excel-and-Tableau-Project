<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20242.24.0910.0334                               -->
<workbook original-version='18.1' source-build='2024.2.3 (20242.24.0910.0334)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='assignmentwealthofnations2' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='GDP+ (The Wealth of nations (1))' inline='true' name='federated.0xjtlz513f6v851ao5uae1gxvg69' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='The Wealth of nations (1)' name='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/marni/Downloads/The Wealth of nations (1).xlsx' interpretationMode='0' password='' server='' validate='no' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='GDP' table='[GDP$]' type='table'>
          <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='6'>
            <column datatype='integer' name='Rank' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
            <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='GDP' table='[GDP$]' type='table'>
            <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='6'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
              <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
            </columns>
          </relation>
          <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
            <columns gridOrigin='A1:D197:no:A1:D197:0' header='yes' outcome='6'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='real' name='Life expectancy at birth' ordinal='2' />
              <column datatype='date' date-parse-format='yyyy' name='Date of Information' ordinal='3' />
            </columns>
          </relation>
          <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='Smartphones' table='[Smartphones$]' type='table'>
            <columns gridOrigin='A1:D75:no:A1:D75:0' header='yes' outcome='6'>
              <column datatype='integer' name='Rank' ordinal='0' />
              <column datatype='string' name='Country' ordinal='1' />
              <column datatype='integer' name='Smartphone Users' ordinal='2' />
              <column datatype='date' date-parse-format='yyyy' name='Date of Information' ordinal='3' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[Country (Life Expectancy)]' value='[Life Expectancy].[Country]' />
          <map key='[Country (Smartphones)]' value='[Smartphones].[Country]' />
          <map key='[Country]' value='[GDP].[Country]' />
          <map key='[Date of Information (Smartphones)]' value='[Smartphones].[Date of Information]' />
          <map key='[Date of Information]' value='[Life Expectancy].[Date of Information]' />
          <map key='[GDP - per capita (PPP)]' value='[GDP].[GDP - per capita (PPP)]' />
          <map key='[Life expectancy at birth]' value='[Life Expectancy].[Life expectancy at birth]' />
          <map key='[Rank (Life Expectancy)]' value='[Life Expectancy].[Rank]' />
          <map key='[Rank (Smartphones)]' value='[Smartphones].[Rank]' />
          <map key='[Rank]' value='[GDP].[Rank]' />
          <map key='[Smartphone Users]' value='[Smartphones].[Smartphone Users]' />
          <map key='[Year of Information]' value='[GDP].[Year of Information]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[GDP]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>3</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D229:no:A1:D229:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D197:no:A1:D197:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:D75:no:A1:D75:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP - per capita (PPP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP - per capita (PPP)]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>GDP - per capita (PPP)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year of Information</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Year of Information]</local-name>
            <parent-name>[GDP]</parent-name>
            <remote-alias>Year of Information</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank (Life Expectancy)]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (Life Expectancy)]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Life expectancy at birth</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date of Information</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Date of Information]</local-name>
            <parent-name>[Life Expectancy]</parent-name>
            <remote-alias>Date of Information</remote-alias>
            <ordinal>7</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rank</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rank (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Rank</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Smartphone Users</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Smartphone Users]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Smartphone Users</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date of Information</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Date of Information (Smartphones)]</local-name>
            <parent-name>[Smartphones]</parent-name>
            <remote-alias>Date of Information</remote-alias>
            <ordinal>11</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country (Life Expectancy)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Rank (Smartphones)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Smartphone Users]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='GDP' datatype='table' name='[__tableau_internal_object_id__].[GDP_15D593E86EC244F788F0F678BB83E71A]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Life Expectancy' datatype='table' name='[__tableau_internal_object_id__].[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Smartphones' datatype='table' name='[__tableau_internal_object_id__].[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]' role='measure' type='quantitative' />
      <column-instance column='[Smartphone Users]' derivation='Avg' name='[avg:Smartphone Users:qk]' pivot='key' type='quantitative' />
      <column-instance column='[GDP - per capita (PPP)]' derivation='CountD' name='[ctd:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country (Life Expectancy)]' derivation='None' name='[none:Country (Life Expectancy):nk]' pivot='key' type='nominal' />
      <column-instance column='[Country (Smartphones)]' derivation='None' name='[none:Country (Smartphones):nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rank (Smartphones)]' derivation='Sum' name='[sum:Rank (Smartphones):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Smartphone Users]' derivation='Sum' name='[sum:Smartphone Users:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country (Smartphones))' hidden='true' name='[Action (Country (Smartphones))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country (Smartphones)]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_GB' class='hyper' dbname='C:/Users/marni/AppData/Local/Temp/TableauTemp/#TableauTemp_00pub7o0ms50qz1gxwuhg1dd4fp9.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='10/17/2024 06:22:47 PM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='GDP_15D593E86EC244F788F0F678BB83E71A' table='[Extract].[GDP_15D593E86EC244F788F0F678BB83E71A]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
            <relation name='GDP_15D593E86EC244F788F0F678BB83E71A' table='[Extract].[GDP_15D593E86EC244F788F0F678BB83E71A]' type='table' />
            <relation name='Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5' table='[Extract].[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]' type='table' />
            <relation name='Smartphones_122A0DFFBF7848A78E85FE606AF7207B' table='[Extract].[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]' type='table' />
          </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
          <cols>
            <map key='[Country (Life Expectancy)]' value='[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5].[Country]' />
            <map key='[Country (Smartphones)]' value='[Smartphones_122A0DFFBF7848A78E85FE606AF7207B].[Country]' />
            <map key='[Country]' value='[GDP_15D593E86EC244F788F0F678BB83E71A].[Country]' />
            <map key='[Date of Information (Smartphones)]' value='[Smartphones_122A0DFFBF7848A78E85FE606AF7207B].[Date of Information]' />
            <map key='[Date of Information]' value='[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5].[Date of Information]' />
            <map key='[GDP - per capita (PPP)]' value='[GDP_15D593E86EC244F788F0F678BB83E71A].[GDP - per capita (PPP)]' />
            <map key='[Life expectancy at birth]' value='[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5].[Life expectancy at birth]' />
            <map key='[Rank (Life Expectancy)]' value='[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5].[Rank]' />
            <map key='[Rank (Smartphones)]' value='[Smartphones_122A0DFFBF7848A78E85FE606AF7207B].[Rank]' />
            <map key='[Rank]' value='[GDP_15D593E86EC244F788F0F678BB83E71A].[Rank]' />
            <map key='[Smartphone Users]' value='[Smartphones_122A0DFFBF7848A78E85FE606AF7207B].[Smartphone Users]' />
            <map key='[Year of Information]' value='[GDP_15D593E86EC244F788F0F678BB83E71A].[Year of Information]' />
          </cols>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Rank</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Rank]</local-name>
              <parent-name>[GDP_15D593E86EC244F788F0F678BB83E71A]</parent-name>
              <remote-alias>Rank</remote-alias>
              <ordinal>0</ordinal>
              <family>GDP</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>228</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country]</local-name>
              <parent-name>[GDP_15D593E86EC244F788F0F678BB83E71A]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>1</ordinal>
              <family>GDP</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>228</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RGB_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>GDP - per capita (PPP)</remote-name>
              <remote-type>5</remote-type>
              <local-name>[GDP - per capita (PPP)]</local-name>
              <parent-name>[GDP_15D593E86EC244F788F0F678BB83E71A]</parent-name>
              <remote-alias>GDP - per capita (PPP)</remote-alias>
              <ordinal>2</ordinal>
              <family>GDP</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>226</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Year of Information</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Year of Information]</local-name>
              <parent-name>[GDP_15D593E86EC244F788F0F678BB83E71A]</parent-name>
              <remote-alias>Year of Information</remote-alias>
              <ordinal>3</ordinal>
              <family>GDP</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>12</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[GDP_15D593E86EC244F788F0F678BB83E71A]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Rank</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Rank (Life Expectancy)]</local-name>
              <parent-name>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</parent-name>
              <remote-alias>Rank</remote-alias>
              <ordinal>4</ordinal>
              <family>Life Expectancy</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>196</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country (Life Expectancy)]</local-name>
              <parent-name>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>5</ordinal>
              <family>Life Expectancy</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>196</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RGB_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Life expectancy at birth</remote-name>
              <remote-type>5</remote-type>
              <local-name>[Life expectancy at birth]</local-name>
              <parent-name>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</parent-name>
              <remote-alias>Life expectancy at birth</remote-alias>
              <ordinal>6</ordinal>
              <family>Life Expectancy</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>133</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Date of Information</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Date of Information]</local-name>
              <parent-name>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</parent-name>
              <remote-alias>Date of Information</remote-alias>
              <ordinal>7</ordinal>
              <family>Life Expectancy</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Rank</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Rank (Smartphones)]</local-name>
              <parent-name>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</parent-name>
              <remote-alias>Rank</remote-alias>
              <ordinal>8</ordinal>
              <family>Smartphones</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>74</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Country (Smartphones)]</local-name>
              <parent-name>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</parent-name>
              <remote-alias>Country</remote-alias>
              <ordinal>9</ordinal>
              <family>Smartphones</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>74</approx-count>
              <contains-null>true</contains-null>
              <collation flag='1' name='LEN_RGB_S2' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Smartphone Users</remote-name>
              <remote-type>20</remote-type>
              <local-name>[Smartphone Users]</local-name>
              <parent-name>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</parent-name>
              <remote-alias>Smartphone Users</remote-alias>
              <ordinal>10</ordinal>
              <family>Smartphones</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>73</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Date of Information</remote-name>
              <remote-type>133</remote-type>
              <local-name>[Date of Information (Smartphones)]</local-name>
              <parent-name>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</parent-name>
              <remote-alias>Date of Information</remote-alias>
              <ordinal>11</ordinal>
              <family>Smartphones</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>1</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Country (Life Expectancy):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Europe and Central Asia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;World&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;DR Congo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Arab States&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latin America and the Caribbean&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;East Asia and the Pacific&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sub-Saharan Africa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Asia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;East Timor&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;São Tomé and Príncipe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country (Smartphones):nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>%null%</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Trinidad And Tobago&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#1170aa'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#57606c'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#5fa2ce'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#7b848f'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#a3acb9'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#c85200'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot; Monaco&quot;</bucket>
            </map>
            <map to='#c8d0d9'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#ffbc79'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[ctd:GDP - per capita (PPP):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Rank (Smartphones):qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69]&quot;</bucket>
            </map>
            <map to='#a3cce9'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='GDP' id='GDP_15D593E86EC244F788F0F678BB83E71A'>
            <properties context=''>
              <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='GDP' table='[GDP$]' type='table'>
                <columns gridOrigin='A1:D229:no:A1:D229:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='GDP - per capita (PPP)' ordinal='2' />
                  <column datatype='date' date-parse-format='yyyy' name='Year of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='GDP_15D593E86EC244F788F0F678BB83E71A' table='[Extract].[GDP_15D593E86EC244F788F0F678BB83E71A]' type='table' />
            </properties>
          </object>
          <object caption='Life Expectancy' id='Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5'>
            <properties context=''>
              <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='Life Expectancy' table='[&apos;Life Expectancy$&apos;]' type='table'>
                <columns gridOrigin='A1:D197:no:A1:D197:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Life expectancy at birth' ordinal='2' />
                  <column datatype='date' date-parse-format='yyyy' name='Date of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5' table='[Extract].[Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5]' type='table' />
            </properties>
          </object>
          <object caption='Smartphones' id='Smartphones_122A0DFFBF7848A78E85FE606AF7207B'>
            <properties context=''>
              <relation connection='excel-direct.0ihm0p81shvq3e11m6ydw1x96vck' name='Smartphones' table='[Smartphones$]' type='table'>
                <columns gridOrigin='A1:D75:no:A1:D75:0' header='yes' outcome='6'>
                  <column datatype='integer' name='Rank' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='integer' name='Smartphone Users' ordinal='2' />
                  <column datatype='date' date-parse-format='yyyy' name='Date of Information' ordinal='3' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Smartphones_122A0DFFBF7848A78E85FE606AF7207B' table='[Extract].[Smartphones_122A0DFFBF7848A78E85FE606AF7207B]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Country]' />
              <expression op='[Country (Life Expectancy)]' />
            </expression>
            <first-end-point object-id='GDP_15D593E86EC244F788F0F678BB83E71A' />
            <second-end-point object-id='Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[Country (Life Expectancy)]' />
              <expression op='[Country (Smartphones)]' />
            </expression>
            <first-end-point object-id='Life Expectancy_9BE2E7ACD39E4104A56C72F817322EF5' />
            <second-end-point object-id='Smartphones_122A0DFFBF7848A78E85FE606AF7207B' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 1 (generated)' name='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Smartphone users by country' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
    <action caption='Filter 2 (generated)' name='[Action2_93FE1F19ACCA4BAD9AD82B2AF36D362F]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard 1' type='sheet' worksheet='Life expectancy and smartphone users ' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard 1' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Country by Life Expectancy'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#b07aa1'>Top 20 Countries With Highest Life Expectancy at Birth</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Life Expectancy)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
            <column-instance column='[Country (Life Expectancy)]' derivation='None' name='[none:Country (Life Expectancy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]'>
            <groupfilter function='level-members' level='[Country (Smartphones)]' user:ui-action-filter='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Life expectancy at birth])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' palette='gray_10_0' type='interpolated' />
            <encoding attr='size-bar' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]' value='false' />
            <format attr='break-on-special' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]' value='false' />
            <format attr='background-color' value='#f5ead7' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#e2e6f0' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' />
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' />
              <text column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]' />
              <text column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{C2380824-E30F-45C0-A6A1-4D9538478ADB}' />
    </worksheet>
    <worksheet name='GDP and Avg Smartphone Users '>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Top 20 Countries GDP and AVG. Smartphone Users </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Smartphone Users]' role='measure' type='quantitative' />
            <column-instance column='[Smartphone Users]' derivation='Avg' name='[avg:Smartphone Users:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Smartphone Users]' derivation='Sum' name='[sum:Smartphone Users:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]'>
            <groupfilter function='level-members' level='[Country (Smartphones)]' user:ui-action-filter='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#efebe8' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#e2e6f0' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.637182354927063' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.637182354927063' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.637182354927063' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk] + [federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk])</rows>
        <cols>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</cols>
      </table>
      <simple-id uuid='{8604C27A-686F-422F-9DEB-018C24C6B18B}' />
    </worksheet>
    <worksheet name='GDP and Life expectancy '>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Top 20 Countries by GDP and Life Expectancy</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]'>
            <groupfilter function='level-members' level='[Country (Smartphones)]' user:ui-action-filter='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Afghanistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Albania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Andorra&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Angola&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Antigua and Barbuda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Armenia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Austria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahamas&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bahrain&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Barbados&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belarus&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Belize&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Benin&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bhutan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bolivia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bosnia and Herzegovina&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Botswana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burkina Faso&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Burundi&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cameroon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cape Verde&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Central African Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chad&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Comoros&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Congo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Costa Rica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Croatia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cyprus&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Czech Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Djibouti&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Dominican Republic&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;DR Congo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;East Timor&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;El Salvador&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Equatorial Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eritrea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Eswatini&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Fiji&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gabon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Gambia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Georgia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ghana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Greece&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Grenada&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guinea-Bissau&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Guyana&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Haiti&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Honduras&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iceland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Iraq&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ivory Coast&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jamaica&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kazakhstan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kiribati&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kuwait&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Kyrgyzstan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lesotho&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liberia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Libya&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Liechtenstein&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Luxembourg&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Madagascar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malawi&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mali&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Marshall Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mauritius&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Micronesia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Moldova&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Mozambique&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Namibia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nicaragua&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Niger&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;North Macedonia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Norway&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Oman&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palau&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Palestine&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Papua New Guinea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Paraguay&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Qatar&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Rwanda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Kitts and Nevis&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saint Lucia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Samoa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;São Tomé and Príncipe&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Senegal&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Serbia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Seychelles&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sierra Leone&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovakia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Slovenia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Solomon Islands&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;South Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sudan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Suriname&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Switzerland&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Syria&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tajikistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tanzania&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Togo&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tonga&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Tunisia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Turkmenistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uganda&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uruguay&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Uzbekistan&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vanuatu&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;World&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Yemen&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zambia&quot;' />
                  <groupfilter function='member' level='[none:Country:nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f5eddc' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#e6ecf0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='shape' value=':filled/circle' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk] + [federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk])</rows>
        <cols>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</cols>
      </table>
      <simple-id uuid='{758C0DCD-215B-48FF-8E2C-33724D3D5A9C}' />
    </worksheet>
    <worksheet name='GDP by Country'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 20 Countries with the Highest GDP Per Capita PPP</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[GDP - per capita (PPP)]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[GDP - per capita (PPP)]' derivation='Sum' name='[sum:GDP - per capita (PPP):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]'>
            <groupfilter function='level-members' level='[Country (Smartphones)]' user:ui-action-filter='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([GDP - per capita (PPP)])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' data-class='subtotal' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' value='' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]' value='C2057%' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' data-class='subtotal' value='#f5ead7' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f0f3fa' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#e8edda' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</rows>
        <cols>[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]</cols>
      </table>
      <simple-id uuid='{97542CE9-FA99-4E7A-BF72-4F24FEDFC671}' />
    </worksheet>
    <worksheet name='Life expectancy and smartphone users '>
      <layout-options>
        <title>
          <formatted-text>
            <run>Top 20 Countries Life Expectancy and AVG. Smartphone Users</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Life Expectancy)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Life expectancy at birth]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Smartphone Users]' role='measure' type='quantitative' />
            <column-instance column='[Smartphone Users]' derivation='Avg' name='[avg:Smartphone Users:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country (Life Expectancy)]' derivation='None' name='[none:Country (Life Expectancy):nk]' pivot='key' type='nominal' />
            <column-instance column='[Life expectancy at birth]' derivation='Sum' name='[sum:Life expectancy at birth:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Smartphone Users]' derivation='Sum' name='[sum:Smartphone Users:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]'>
            <groupfilter function='level-members' level='[Country (Smartphones)]' user:ui-action-filter='[Action1_C1A1BB1B3B854EFE9E9A8B7D81C0B8B3]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([Life expectancy at birth])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Algeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Argentina&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Australia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Azerbaijan&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Bangladesh&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Belgium&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Brazil&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Bulgaria&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Canada&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Chile&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;China&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Colombia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Cuba&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Denmark&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Ecuador&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Egypt&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Estonia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Ethiopia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Finland&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;France&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Germany&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Guatemala&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Hong Kong&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Hungary&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;India&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Indonesia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Iran&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Ireland&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Israel&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Italy&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Japan&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Jordan&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Kenya&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Latvia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Lebanon&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Lithuania&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Malaysia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Maldives&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Malta&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Mexico&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Mongolia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Montenegro&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Morocco&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Nepal&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Netherlands&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;New Zealand&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Nigeria&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Pakistan&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Panama&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Peru&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Philippines&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Poland&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Portugal&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Romania&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Russia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Saudi Arabia&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Singapore&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;South Africa&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;South Korea&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Spain&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Sri Lanka&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Sweden&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Thailand&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Trinidad and Tobago&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Turkey&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Ukraine&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;United Arab Emirates&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;United Kingdom&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;United States&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Venezuela&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Vietnam&quot;' />
                  <groupfilter function='member' level='[none:Country (Life Expectancy):nk]' member='&quot;Zimbabwe&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' included-values='non-null' />
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]</column>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[Action (Country (Smartphones))]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3ebf3' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#ebebeb' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.59270715713500977' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Life expectancy at birth:qk] + [federated.0xjtlz513f6v851ao5uae1gxvg69].[avg:Smartphone Users:qk])</rows>
        <cols>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Life Expectancy):nk]</cols>
      </table>
      <simple-id uuid='{7ADBDE0B-FD9D-49E1-B054-0EAB6927807B}' />
    </worksheet>
    <worksheet name='Smartphone users by country'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Top 20 Countries with the Highest Amount of Smartphone Users</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='GDP+ (The Wealth of nations (1))' name='federated.0xjtlz513f6v851ao5uae1gxvg69' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0xjtlz513f6v851ao5uae1gxvg69'>
            <column datatype='string' name='[Country (Smartphones)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Smartphone Users]' role='measure' type='quantitative' />
            <column-instance column='[Country (Smartphones)]' derivation='None' name='[none:Country (Smartphones):nk]' pivot='key' type='nominal' />
            <column-instance column='[Smartphone Users]' derivation='Sum' name='[sum:Smartphone Users:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Smartphones):nk]'>
            <groupfilter count='20' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='AVG([Smartphone Users])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Country (Smartphones):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Smartphones):nk]' direction='ASC'>
            <dictionary>
              <bucket>%all%</bucket>
              <bucket>&quot;China&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;United States&quot;</bucket>
              <bucket>&quot;Brazil&quot;</bucket>
              <bucket>&quot;Russia&quot;</bucket>
              <bucket>&quot;Nigeria&quot;</bucket>
              <bucket>&quot;Bangladesh&quot;</bucket>
              <bucket>&quot;Pakistan&quot;</bucket>
              <bucket>&quot;Japan&quot;</bucket>
              <bucket>&quot;Germany&quot;</bucket>
              <bucket>&quot;Philippines&quot;</bucket>
              <bucket>&quot;Mexico&quot;</bucket>
              <bucket>&quot;Iran&quot;</bucket>
              <bucket>&quot;Egypt&quot;</bucket>
              <bucket>&quot;Italy&quot;</bucket>
              <bucket>&quot;United Kingdom&quot;</bucket>
              <bucket>&quot;Vietnam&quot;</bucket>
              <bucket>&quot;Turkey&quot;</bucket>
              <bucket>&quot;France&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Smartphones):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
            <encoding attr='color' field='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' palette='gray_warm_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#f3ebf3' />
          </style-rule>
          <style-rule element='title'>
            <format attr='background-color' value='#f3faf9' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' />
              <color column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' />
              <text column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country (Smartphones):nk]' />
              <text column='[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:Smartphone Users:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{2CD5A877-88CC-4D15-B837-9786AF42D927}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Wealth of Nations</run>
          </formatted-text>
        </title>
      </layout-options>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#fefaf1' />
        </style-rule>
      </style>
      <size sizing-mode='automatic' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97890' id='16' param='vert' type-v2='layout-flow' w='99002' x='499' y='1055'>
            <zone h='7651' id='17' type-v2='title' w='99002' x='499' y='1055'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='90239' id='14' type-v2='layout-basic' w='99002' x='499' y='8706'>
              <zone h='46578' id='6' name='Smartphone users by country' w='24751' x='499' y='8706'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='43661' id='7' name='GDP and Avg Smartphone Users ' w='37126' x='25250' y='55284'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='43661' id='8' name='Life expectancy and smartphone users ' w='24751' x='499' y='55284'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='46578' id='9' name='GDP by Country' w='49501' x='50000' y='8706'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='43661' id='10' name='GDP and Life expectancy ' w='37125' x='62376' y='55284'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='46578' id='11' name='Country by Life Expectancy' w='24750' x='25250' y='8706'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontalignment='1'>Wealth of Nations</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1800' minheight='1800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='21' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97890' id='20' param='vert' type-v2='layout-flow' w='99002' x='499' y='1055'>
                <zone h='7651' id='17' type-v2='title' w='99002' x='499' y='1055'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46578' id='6' is-fixed='true' name='Smartphone users by country' w='24751' x='499' y='8706'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46578' id='11' is-fixed='true' name='Country by Life Expectancy' w='24750' x='25250' y='8706'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46578' id='9' is-fixed='true' name='GDP by Country' w='49501' x='50000' y='8706'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='43661' id='8' is-fixed='true' name='Life expectancy and smartphone users ' w='24751' x='499' y='55284'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='43661' id='7' is-fixed='true' name='GDP and Avg Smartphone Users ' w='37126' x='25250' y='55284'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='43661' id='10' is-fixed='true' name='GDP and Life expectancy ' w='37125' x='62376' y='55284'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{060D7061-08E0-4E49-A02E-A4F764F7855E}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Country by Life Expectancy'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{9E5B28CF-55A3-468A-8ABD-40CB7ABC3FF9}' />
    </window>
    <window class='worksheet' name='GDP by Country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{B25BC637-92CE-47F6-94C0-08CDD65DE3CB}' />
    </window>
    <window class='worksheet' name='Smartphone users by country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{14823F6D-7D8E-446C-BC58-EA9316A15E9B}' />
    </window>
    <window class='worksheet' name='GDP and Avg Smartphone Users '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A03AC5BA-BA3B-4DE1-BA5B-828A37AF9614}' />
    </window>
    <window class='worksheet' name='Life expectancy and smartphone users '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
      </viewpoint>
      <simple-id uuid='{285B4110-E12C-42DA-8D66-D3B9CE67831A}' />
    </window>
    <window class='worksheet' name='GDP and Life expectancy '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.0xjtlz513f6v851ao5uae1gxvg69].[:Measure Names]</field>
            <field>[federated.0xjtlz513f6v851ao5uae1gxvg69].[none:Country:nk]</field>
            <field>[federated.0xjtlz513f6v851ao5uae1gxvg69].[sum:GDP - per capita (PPP):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1486E750-237E-498F-91C0-B4F5291EB82A}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Country by Life Expectancy'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP and Avg Smartphone Users '>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP and Life expectancy '>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='GDP by Country'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Life expectancy and smartphone users '>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Smartphone users by country'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='17' />
      <simple-id uuid='{AF9C2545-1A33-45DD-9DC2-CA52D52E33FC}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Country by Life Expectancy' width='192'>
      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
      gzftdQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='GDP and Avg Smartphone Users ' width='192'>
      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
      SgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='GDP and Life expectancy ' width='192'>
      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
      xJEAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='GDP by Country' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Life expectancy and smartphone users ' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Smartphone users by country' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
